--GENERAL INFO ANALYSIS:

--GB1)WHAT IS THE TOTAL NUMBER OF PRODUCT TYPES AND PRODUCT CATEGORIES?
SELECT COUNT(DISTINCT PRODUCT_ID) AS COUNT_PRODUCTS,
	COUNT(DISTINCT CATEGORY_ID) AS COUNT_CATEGORY
FROM PRODUCTS 

--GB2) LIST PRODUCT CATEGORIES AND EXISTING PRODUCTS.
SELECT C.CATEGORY_NAME,
	P.PRODUCT_NAME
FROM PRODUCTS AS P
INNER JOIN CATEGORIES AS C ON C.CATEGORY_ID = P.CATEGORY_ID

--GB3) WHAT IS THE COMPANY'S TOTAL NUMBER OF ORDERS AND TOTAL PRODUCT SALES AND TOTAL EARNINGS FOR 3 YEARS?
SELECT COUNT(DISTINCT O.ORDER_ID) AS COUNT_ORDERS,
	SUM(QUANTITY) AS TOTAL_QUANTITY,
	ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS TOTAL_EARN
FROM ORDERS AS O
LEFT JOIN ORDER_DETAILS AS OD ON OD.ORDER_ID = O.ORDER_ID

--GB4)WHAT IS THE TOTAL NUMBER OF ORDERS BY COUNTRY? 
SELECT SHIP_COUNTRY,
	COUNT(ORDER_ID)
FROM ORDERS
GROUP BY 1
ORDER BY 2 DESC

--GB5) WHICH ARE THE TOP 5 COUNTRIES WITH THE MOST SHIPMENTS/SALES? AND WHO ARE OUR CUSTOMERS?

WITH CUST_AND_CON AS(
	SELECT DENSE_RANK() OVER (ORDER BY COUNT(SHIP_COUNTRY) DESC) AS RANK,O.SHIP_COUNTRY,C.COMPANY_NAME,C.CONTACT_NAME,
	COUNT(ORDER_ID) AS COUNT_ORDERS
	FROM ORDERS O
INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID=O.CUSTOMER_ID
GROUP BY 2,3,4)
SELECT * FROM CUST_AND_CON
WHERE RANK IN (1,2,3,4,5)
ORDER BY 1

--GB6) WHAT IS THE CHANGE IN THE TOTAL NUMBER OF ORDERS IN THE ANNUAL BREAKDOWN COMPARED TO THE
--PREVIOUS AND THE FOLLOWING YEAR?

WITH Y_ORDER_COUNTS_RATES AS
	(SELECT DATE_TRUNC('year',ORDER_DATE) AS YEARS,
			COUNT(O.ORDER_ID) AS COUNT_ORDERS,
			LEAD(COUNT(O.ORDER_ID)) OVER (ORDER BY DATE_TRUNC('year',ORDER_DATE)) AS NEXT_YEAR_COUNT,
			LAG(COUNT(O.ORDER_ID)) OVER (	ORDER BY DATE_TRUNC('year',	ORDER_DATE)) AS PREV_YEAR_COUNT
		FROM ORDERS O
		GROUP BY 1)
SELECT EXTRACT(YEAR FROM YEARS),
	COUNT_ORDERS,
	PREV_YEAR_COUNT AS PREV_YEAR_ORDERS,
	NEXT_YEAR_COUNT AS NEXT_YEAR_ORDERS,
	'%' || 100 * (COUNT_ORDERS - PREV_YEAR_COUNT) / PREV_YEAR_COUNT AS PERCENTAGE_RATES
FROM Y_ORDER_COUNTS_RATES AS C
ORDER BY 1

--GB7) WHAT IS THE CHANGE IN THE TOTAL NUMBER OF SALES IN THE ANNUAL BREAKDOWN COMPARED TO 
--THE PREVIOUS AND THE FOLLOWING YEAR?

WITH Y_TOTAL_QUANTITY_RATES AS
	(SELECT DATE_TRUNC('year',O.ORDER_DATE) AS YEARS,SUM(OD.QUANTITY) AS TOTAL_QUANTITY,
			LEAD(SUM(OD.QUANTITY)) OVER (	ORDER BY DATE_TRUNC('year',O.ORDER_DATE)) AS NEXT_YEAR_QUANTITY_TOTAL,
			LAG(SUM(OD.QUANTITY)) OVER (ORDER BY DATE_TRUNC('year',O.ORDER_DATE)) AS PREV_YEAR_QUANTITY_TOTAL
		FROM ORDER_DETAILS OD
		LEFT JOIN ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
		GROUP BY 1)
SELECT EXTRACT(YEAR FROM YEARS),
	TOTAL_QUANTITY,
	PREV_YEAR_QUANTITY_TOTAL AS PREV_YEAR_QT,
	NEXT_YEAR_QUANTITY_TOTAL AS NEXT_YEAR_QT,
	'%' || 100 * (TOTAL_QUANTITY - PREV_YEAR_QUANTITY_TOTAL) / PREV_YEAR_QUANTITY_TOTAL AS PERCENTAGE_RATES
FROM Y_TOTAL_QUANTITY_RATES AS Q
ORDER BY 1

--GB8) WHAT IS THE CHANGE IN TOTAL EARNINGS IN THE ANNUAL BREAKDOWN COMPARED TO THE PREVIOUS 
--AND THE FOLLOWING YEAR?

WITH Y_TOTAL_EARN_RATES AS
	(SELECT DATE_TRUNC('year',O.ORDER_DATE) AS YEARS,
			ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS EARN
		FROM ORDER_DETAILS OD
		LEFT JOIN ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
		GROUP BY 1),
	Y_TOTAL_EARN_RATES2 AS
	(SELECT EXTRACT(YEAR FROM YEARS),
			EARN,
			LEAD(EARN) OVER (ORDER BY YEARS) AS NEXT_YEAR_EARN,
			LAG(EARN) OVER (ORDER BY YEARS) AS PREV_YEAR_EARN
		FROM Y_TOTAL_EARN_RATES AS YTE
		ORDER BY 1)
SELECT *,'%' || ROUND(100 * ((EARN - PREV_YEAR_EARN) / PREV_YEAR_EARN),	2)AS PERCENTAGE_RATES
FROM Y_TOTAL_EARN_RATES2 AS YTE2


--GB9)WHICH IS/ARE THE MOST PREFERRED SHIPPING COMPANY FOR ORDERS?
WITH CRG AS
	(SELECT DENSE_RANK() OVER (ORDER BY COUNT(O.SHIP_VIA) DESC) AS RANK,
			O.SHIP_VIA,
			S.COMPANY_NAME,
			COUNT(O.SHIP_VIA) AS COUNT_SHIPPERS
		FROM SHIPPERS S
		LEFT JOIN ORDERS O ON O.SHIP_VIA = S.SHIPPER_ID
		GROUP BY 2,3
		ORDER BY 4 DESC)
SELECT *
FROM CRG
WHERE RANK = 1


--CURRENCY and ORDER ANALYSIS:

--CO1)WHAT IS THE TOTAL SALES AMOUNT AND THE NUMBER OF ORDERS AND
--THE NUMBER OF ORDERS IN THE MONTHLY BREAKDOWN?
WITH SSS AS(
	SELECT DATE_TRUNC('MONTH',O.ORDER_DATE) as MONTH, COUNT(O.ORDER_ID) AS COUNT_ORDERS,
			SUM(QUANTITY) AS TOTAL_QUANTITY,
			ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS EARN
		FROM ORDERS O
		LEFT JOIN ORDER_DETAILS AS OD ON O.ORDER_ID = OD.ORDER_ID
		GROUP BY 1
ORDER BY 1)
SELECT TO_CHAR(MONTH,'YYYY-MM') AS YEARS_MONTH,
	COUNT_ORDERS,
	TOTAL_QUANTITY,
	EARN
FROM SSS

--CO2) WHAT IS THE TOTAL AMOUNT OF SALES AND NUMBER OF ORDERS IN THE ANNUAL BREAKDOWN?

WITH SS AS(
SELECT DATE_TRUNC('year',O.ORDER_DATE) AS YEARS,
	COUNT(O.ORDER_ID) AS COUNT_ORDERS,
	SUM(QUANTITY) AS TOTAL_QUANTITY,
	ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS EARN
FROM ORDER_DETAILS OD
LEFT JOIN ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
GROUP BY 1
ORDER BY 1)
SELECT TO_CHAR(YEARS,'YYYY')AS YEARS,COUNT_ORDERS,TOTAL_QUANTITY,EARN FROM SS

--CO3) WHAT IS THE NUMBER OF PRODUCTS SOLD AND THE AMOUNT OF SALES BY PRODUCT CATEGORIES?
SELECT C.CATEGORY_NAME,
	P.PRODUCT_NAME,
	ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS SATIS_TUTARI,
	COUNT(*) OVER(PARTITION BY C.CATEGORY_NAME)
FROM ORDER_DETAILS OD
LEFT JOIN PRODUCTS AS P ON P.PRODUCT_ID = OD.PRODUCT_ID
LEFT JOIN CATEGORIES AS C ON P.CATEGORY_ID = C.CATEGORY_ID
GROUP BY 1,2
ORDER BY 3 DESC

--CO4) WHAT IS THE AMOUNT OF SALES AND NUMBER OF CATEGORICAL AND PRODUCT SALES BY PRODUCT AND 
--PRODUCT CATEGORIES SOLD IN THE MONTHLY BREAKDOWN?

WITH SK AS(
SELECT DATE_TRUNC('month',O.ORDER_DATE) AS MONTH,
	C.CATEGORY_NAME,
	P.PRODUCT_NAME,
	ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS EARN,
	COUNT(*) OVER(PARTITION BY C.CATEGORY_NAME) AS TOTAL_COUNT_CATEGORY,
	COUNT(*) OVER(PARTITION BY p.PRODUCT_NAME) AS TOTAL_COUNT_PRODUCT
FROM ORDER_DETAILS OD
LEFT JOIN PRODUCTS AS P ON P.PRODUCT_ID = OD.PRODUCT_ID
LEFT JOIN CATEGORIES AS C ON P.CATEGORY_ID = C.CATEGORY_ID
LEFT JOIN ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
GROUP BY 1,2,3
ORDER BY 1)
SELECT TO_CHAR(MONTH,'YYYY-MM') AS YEARS_MONTH,
	CATEGORY_NAME,
	PRODUCT_NAME,
	EARN,
	TOTAL_COUNT_CATEGORY,
	TOTAL_COUNT_PRODUCT
FROM SK
ORDER BY 1

--CO5)AMOUNT OF SALES AND NUMBER OF CATEGORICAL SALES BY PRODUCT AND PRODUCT CATEGORIES SOLD IN ANNUAL BREAK-

WITH YS AS(
SELECT DATE_TRUNC('YEAR',O.ORDER_DATE) AS YEARS,
	C.CATEGORY_NAME,
	P.PRODUCT_NAME,
	ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS EARN,
	COUNT(*) OVER(PARTITION BY C.CATEGORY_NAME) AS TOTAL_COUNT_CATEGORY
FROM ORDER_DETAILS OD
LEFT JOIN PRODUCTS AS P ON P.PRODUCT_ID = OD.PRODUCT_ID
LEFT JOIN CATEGORIES AS C ON P.CATEGORY_ID = C.CATEGORY_ID
LEFT JOIN ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
GROUP BY 1,2,3
ORDER BY 1)
SELECT TO_CHAR(YEARS,'YYYY')AS YEARS,
	CATEGORY_NAME,
	PRODUCT_NAME,
	EARN,
	TOTAL_COUNT_CATEGORY
FROM YS
ORDER BY 1

--CO6) WHAT ARE THE COUNTRY-BASED EARNINGS AND NUMBER OF ORDERS IN TERMS OF PRODUCTS SOLD?

SELECT P.PRODUCT_NAME,
	O.SHIP_COUNTRY,
	ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS TOTAL_EARN,
	COUNT(O.ORDER_ID) AS COUNT_PRODUCT_ORDERS,
	
FROM ORDER_DETAILS AS OD
LEFT JOIN PRODUCTS AS P ON P.PRODUCT_ID = OD.PRODUCT_ID
LEFT JOIN ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
GROUP BY 1,2
ORDER BY 3 DESC


--CO7) WHAT IS THE BREAKDOWN OF PRODUCT CATEGORIES BY COUNTRY AND 
--HOW MUCH IS THE REVENUE AND NUMBER OF ORDERS?

SELECT C.CATEGORY_NAME,
	O.SHIP_COUNTRY,
	ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS TOTAL_EARN,
	COUNT(O.ORDER_ID) AS COUNT_CATEGORY_ORDERS
FROM ORDER_DETAILS AS OD
LEFT JOIN PRODUCTS AS P ON P.PRODUCT_ID = OD.PRODUCT_ID
LEFT JOIN CATEGORIES AS C ON P.CATEGORY_ID = C.CATEGORY_ID
LEFT JOIN ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
GROUP BY 1,2
ORDER BY 3 DESC

--CO8) WHAT ARE THE NUMBER OF ORDERS ON WHICH DAYS OF THE WEEK?

SELECT TO_CHAR(ORDER_DATE,'DAY') AS DAYS,
	COUNT(ORDER_ID) AS ORDER_COUNT
FROM ORDERS
GROUP BY 1
ORDER BY 2 DESC

--CO9)HOW MUCH IS THE PROFIT OBTAINED IN THE DAY BREAKDOWN OF THE ORDER PLACED?

WITH NEWTABLE_DAYS_END AS
	(SELECT O.ORDER_DATE,
			ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,0) AS EARN
		FROM ORDER_DETAILS AS OD
		LEFT JOIN ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
		GROUP BY 1
		ORDER BY 2 DESC)
SELECT TO_CHAR(ORDER_DATE,'DAY') AS DAYS,
	SUM(EARN) AS TOTAL_EARN
FROM NEWTABLE_DAYS_END
GROUP BY 1
ORDER BY 2 DESC

--CO10)WHAT ARE THE PRODUCTS AND CATEGORIES WITH AN ORDER QUANTITY OF 1000 UNITS OR MORE?

SELECT C.CATEGORY_NAME,
	P.PRODUCT_NAME,
	SUM(QUANTITY) AS SP
FROM ORDER_DETAILS OD
INNER JOIN PRODUCTS P ON P.PRODUCT_ID = OD.PRODUCT_ID
INNER JOIN CATEGORIES C ON C.CATEGORY_ID = P.CATEGORY_ID
GROUP BY 1,2
HAVING SUM(QUANTITY) > 1000
ORDER BY 3 DESC

--CO11) WHICH ARE THE COUNTRIES THAT ARE SHIPPED ACCORDING TO THE NUMBER OF ORDERS? WHO ARE THE CUSTOMERS? 

SELECT DENSE_RANK() OVER (ORDER BY COUNT(ORDER_ID) DESC) AS RANK,
	SHIP_COUNTRY,C.COMPANY_NAME,C.CONTACT_NAME,
	COUNT(ORDER_ID) AS COUNT_ORDERS
	FROM ORDERS O
INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID=O.CUSTOMER_ID
GROUP BY 2,3,4

--CO12) WHAT ARE THE CHANGES IN THE TOTAL NUMBER OF ORDERS BY COUNTRY IN THE ANNUAL BREAKDOWN?

WITH SP2 AS
	(WITH SP AS
			(SELECT DATE_TRUNC('year',ORDER_DATE) AS YEARS,
					SHIP_COUNTRY,
					COUNT(ORDER_ID) AS COUNT_ORDERS
				FROM ORDERS
				GROUP BY 1,2
				ORDER BY 2 DESC) SELECT EXTRACT(YEAR FROM YEARS),
			SHIP_COUNTRY,
			COUNT_ORDERS,
			LEAD(COUNT_ORDERS) OVER (PARTITION BY SHIP_COUNTRY ORDER BY YEARS) AS NEXT_YEAR_COUNT_ORDERS,
			LAG(COUNT_ORDERS) OVER (PARTITION BY SHIP_COUNTRY ORDER BY YEARS) AS PREV_YEAR_COUNT_ORDERS
		FROM SP)
SELECT *,
	'%' || 100 * (COUNT_ORDERS - PREV_YEAR_COUNT_ORDERS) / PREV_YEAR_COUNT_ORDERS AS PERCENTAGE_RATES
FROM SP2

--LOGISTICS ANALYSIS:

--L1)WHAT IS THE AVERAGE NUMBER OF DAYS BETWEEN THE ORDER DATE AND SHIPMENT DATE AND THE TOTAL NUMBER OF ORDERS?

WITH AVG_SHIP AS
	(SELECT SHIP_COUNTRY,
			ROUND(AVG(EXTRACT(DAY FROM (SHIPPED_DATE - ORDER_DATE) * INTERVAL '1 DAY')),
				0) AS AVERAGE_DAYS_BETWEEN_ORDER_SHIPPING,
			COUNT(*) AS TOTAL_NUMBER_ORDERS
		FROM ORDERS
		GROUP BY SHIP_COUNTRY
		ORDER BY 2)
SELECT DENSE_RANK() OVER (ORDER BY AVERAGE_DAYS_BETWEEN_ORDER_SHIPPING)AS RANK,*
FROM AVG_SHIP
 

--L2) HOW MANY SHIPMENTS HAVE BEEN MADE TO WHICH COUNTRY IN THE CARGO COMPANY BREAKDOWN AND
--HOW MUCH IS THE TOTAL CARGO COST?

SELECT S.COMPANY_NAME,
	SHIP_COUNTRY,
	COUNT(O.SHIP_VIA) AS COUNT_SHIP,
	ROUND(SUM(FREIGHT)::NUMERIC,2) AS  SHIP_TOTAL_EXPENSE
FROM ORDERS O
LEFT JOIN SHIPPERS S ON S.SHIPPER_ID = O.SHIP_VIA
GROUP BY 1,2
ORDER BY 4 DESC

--L3)HOW MUCH ARE THE TOTAL CARGO COSTS IN THE COUNTRY BREAKDOWN?

SELECT SHIP_COUNTRY,
	ROUND(SUM(FREIGHT)::NUMERIC,2) AS TOTAL_SHIP_EXP
FROM ORDERS
GROUP BY 1
ORDER BY 2 DESC

--L4) WHICH CARGO COMPANIES ARE PREFERRED FOR ORDERS?

SELECT O.SHIP_VIA,S.COMPANY_NAME, COUNT(O.SHIP_VIA) AS COUNT_SHIPPERS FROM SHIPPERS S
LEFT JOIN ORDERS O ON O.SHIP_VIA=S.SHIPPER_ID
GROUP BY 1,2
ORDER BY 3 DESC

--L5)-WHO ARE THE CARGO COMPANIES THAT ARE BELOW THE AVERAGE NUMBER OF DAYS BETWEEN THE ORDER DATE AND THE SHIPMENT DATE? 
--WHICH PRODUCT DO THEY CARRY?

WITH LJ2 AS
	(WITH LJ AS
			(SELECT SHIP_COUNTRY,
					COMPANY_NAME,
					C.CATEGORY_NAME,
					(SHIPPED_DATE - ORDER_DATE) AS GAP_DAYS_BTW_ORDER_SHIPPING_DATES,
					(AVG(SHIPPED_DATE - ORDER_DATE) OVER (PARTITION BY SHIP_COUNTRY))::INTEGER AS AVG_DAYS_BTW_ORDER_SHIPPING_DATES
				FROM ORDERS O
				LEFT JOIN SHIPPERS SH ON SH.SHIPPER_ID = O.SHIP_VIA
				LEFT JOIN ORDER_DETAILS OD ON OD.ORDER_ID = O.ORDER_ID
				LEFT JOIN PRODUCTS P ON P.PRODUCT_ID = OD.PRODUCT_ID
				LEFT JOIN CATEGORIES C ON C.CATEGORY_ID = P.CATEGORY_ID
				GROUP BY 1,2,3,4
				ORDER BY 5) 
	 SELECT * FROM LJ
		WHERE GAP_DAYS_BTW_ORDER_SHIPPING_DATES IS NOT NULL )
SELECT DISTINCT COMPANY_NAME,CATEGORY_NAME,SHIP_COUNTRY
FROM LJ2
WHERE GAP_DAYS_BTW_ORDER_SHIPPING_DATES < AVG_DAYS_BTW_ORDER_SHIPPING_DATES

--L6) WHAT ARE THE AVERAGE NUMBERS OF DELIVERY DAYS BY CARGO COMPANY?

WITH LJT AS(
SELECT
	SHIP_COUNTRY,COMPANY_NAME,
	(SHIPPED_DATE - ORDER_DATE) AS gap_days_btw_order_shipping_dates,
	(AVG(SHIPPED_DATE - ORDER_DATE) OVER (PARTITION BY COMPANY_NAME))::INTEGER AS AVG_DAYS_CARGO_COMPANY
FROM ORDERS O
LEFT JOIN SHIPPERS SH ON SH.SHIPPER_ID = O.SHIP_VIA
LEFT JOIN ORDER_DETAILS OD ON OD.ORDER_ID=O.ORDER_ID
GROUP BY 1,2,3
ORDER BY 4)

SELECT COMPANY_NAME,ROUND((AVG(AVG_DAYS_CARGO_COMPANY))::NUMERIC,1) AS AVG_DAYS_CARGO_COMPANY  FROM LJT
GROUP BY 1

--L7) WHAT IS THE AVERAGE NUMBER OF DAYS FOR CARGO COMPANIES?

WITH LJJ AS (
WITH LJT AS(
SELECT
	SHIP_COUNTRY,COMPANY_NAME,
	(SHIPPED_DATE - ORDER_DATE) AS gap_days_btw_order_shipping_dates,
	(AVG(SHIPPED_DATE - ORDER_DATE) OVER (PARTITION BY COMPANY_NAME))::INTEGER AS AVG_DAYS_CARGO_COMPANY
FROM ORDERS O
LEFT JOIN SHIPPERS SH ON SH.SHIPPER_ID = O.SHIP_VIA
LEFT JOIN ORDER_DETAILS OD ON OD.ORDER_ID=O.ORDER_ID
GROUP BY 1,2,3
ORDER BY 4)

SELECT COMPANY_NAME,ROUND((AVG(AVG_DAYS_CARGO_COMPANY))::NUMERIC,1) AS AVG_DAYS_CARGO_COMPANY  FROM LJT
GROUP BY 1)
SELECT AVG(AVG_DAYS_CARGO_COMPANY)::NUMERIC AS AVG_DAYS_CARGO_COMPANY  FROM LJJ



--PRODUCT&STOCK ANALYSIS:

--PS1)WHAT IS THE UNIT PRICE IN CATEGORY AND PRODUCT BREAKDOWN? WHAT ARE THE HIGHEST DISCOUNT RATES?

SELECT DISTINCT C.CATEGORY_NAME,
	P.PRODUCT_NAME,
	DISCONTINUED,
	ROUND(P.UNIT_PRICE::INTEGER,0) AS UNIT_PRICE,
	UNIT_IN_STOCK,
	ROUND((P.UNIT_PRICE*UNIT_IN_STOCK)::INTEGER,0) AS STOCK_VALUE,
	MAX(OD.DISCOUNT) AS MAX_DISCOUNT_PERCENTAGE
FROM PRODUCTS P
LEFT JOIN ORDER_DETAILS AS OD ON OD.PRODUCT_ID = P.PRODUCT_ID
LEFT JOIN CATEGORIES AS C ON C.CATEGORY_ID = P.CATEGORY_ID
GROUP BY 1,2,3,4,5,6
ORDER BY 6 DESC
	

--PS2) WHAT IS THE TOTAL STOCK VALUE OF THE PRODUCTS?

WITH STK AS(
SELECT DISTINCT C.CATEGORY_NAME,
	P.PRODUCT_NAME, (P.UNIT_PRICE*UNIT_IN_STOCK)::INTEGER AS STOCK_VALUE
FROM PRODUCTS P
LEFT JOIN ORDER_DETAILS AS OD ON OD.PRODUCT_ID = P.PRODUCT_ID
LEFT JOIN CATEGORIES AS C ON C.CATEGORY_ID = P.CATEGORY_ID
)
SELECT DISTINCT CATEGORY_NAME,
	PRODUCT_NAME,SUM(STOCK_VALUE) AS TOTAL_STOCK_VALUE FROM STK
	GROUP BY 1,2
	ORDER BY 3 DESC



--PS3)WHAT IS THE TOTAL STOCK QUANTITY OF THE CATEGORIES AND THEIR STOCK VALUES?

WITH STK AS(
SELECT DISTINCT C.CATEGORY_NAME,UNIT_IN_STOCK,
	(P.UNIT_PRICE*UNIT_IN_STOCK)::INTEGER AS STOCK_VALUE
FROM PRODUCTS P
LEFT JOIN ORDER_DETAILS AS OD ON OD.PRODUCT_ID = P.PRODUCT_ID
LEFT JOIN CATEGORIES AS C ON C.CATEGORY_ID = P.CATEGORY_ID
)
SELECT DISTINCT CATEGORY_NAME,
	UNIT_IN_STOCK,SUM(STOCK_VALUE) AS TOTAL_STOCK_VALUE FROM STK
	GROUP BY 1,2
	ORDER BY 2 DESC

--PS4)WHAT ARE THE AVERAGE UNIT PRICES BY CATEGORY?

SELECT C.CATEGORY_NAME,
	ROUND(AVG(UNIT_PRICE)::INTEGER,0) AS AVERAGE_UNIT_PRICE
FROM PRODUCTS AS P
INNER JOIN CATEGORIES C ON C.CATEGORY_ID = P.CATEGORY_ID
GROUP BY 1
ORDER BY 2 DESC


--PS5)LIST PRODUCTS THAT ARE ABOVE AND BELOW THE AVERAGE UNIT PRICE IN THE CATEGORY.

WITH CAT_PRO_UNIT_PRICE AS
	(SELECT C.CATEGORY_ID,
			C.CATEGORY_NAME,
			ROUND(AVG(UNIT_PRICE)::INTEGER,0) AS AVERAGE_UNIT_PRICE_IN_CAT
		FROM PRODUCTS AS P
		INNER JOIN CATEGORIES C ON C.CATEGORY_ID = P.CATEGORY_ID
		GROUP BY 1
		ORDER BY 2 DESC)
SELECT CPU.CATEGORY_NAME,
	P.PRODUCT_NAME,
	ROUND(P.UNIT_PRICE::INTEGER,0),
	CPU.AVERAGE_UNIT_PRICE_IN_CAT,
	ROUND((P.UNIT_PRICE-AVERAGE_UNIT_PRICE_IN_CAT)::INTEGER,0) AS GAP
FROM PRODUCTS AS P
INNER JOIN CAT_PRO_UNIT_PRICE AS CPU ON CPU.CATEGORY_ID = P.CATEGORY_ID
WHERE P.UNIT_PRICE < CPU.AVERAGE_UNIT_PRICE_IN_CAT OR P.UNIT_PRICE > CPU.AVERAGE_UNIT_PRICE_IN_CAT
ORDER BY 5 DESC

--PS6) WHAT ARE THE PRODUCTS WHOSE STOCK LEVELS ARE URGENT AND NEED TO BE ORDERED?
WITH STC AS
	(SELECT PRODUCT_NAME,
			UNIT_IN_STOCK,
			REORDER_LEVEL,
			REORDER_LEVEL - UNIT_IN_STOCK AS GAP_STOCK,
	 DISCONTINUED
		FROM PRODUCTS
		WHERE UNIT_IN_STOCK <= REORDER_LEVEL 
		ORDER BY 4 DESC)
SELECT DENSE_RANK() OVER (ORDER BY UNIT_IN_STOCK,GAP_STOCK DESC)AS RANK,*
FROM STC


--PS7)INVENTORY TURNOVER RATIO OF PRODUCTS

SELECT PRODUCT_NAME,
	UNIT_IN_STOCK,
	SUM(OD.QUANTITY) AS TOTAL_QUANTITY,
	ROUND(UNIT_IN_STOCK / SUM(OD.QUANTITY)::numeric,2) AS ITR
FROM PRODUCTS P
LEFT JOIN ORDER_DETAILS AS OD ON OD.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 1,2
ORDER BY 4 



--CUSTOMER ANALYSIS:

--C1)WHO ARE THE TOP 5 CUSTOMERS WITH THE MOST ORDERS AND THE MOST EARNINGS?
WITH CUST2 AS
	(WITH CUST AS
			(SELECT DENSE_RANK() OVER (ORDER BY COUNT(O.ORDER_ID) DESC) AS COUNT_ORDER_RANK,
					C.COMPANY_NAME,
					C.CONTACT_NAME,
					COUNT(O.ORDER_ID) AS COUNT_ORDERS,
					ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY * (1 - OD.DISCOUNT))::NUMERIC,2) AS TOTAL_EARN
				FROM ORDERS O
				INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
				INNER JOIN ORDER_DETAILS OD ON OD.ORDER_ID = O.ORDER_ID
				GROUP BY 2,3) 
	 SELECT *
		FROM CUST
		WHERE COUNT_ORDER_RANK <= 5
		ORDER BY TOTAL_EARN DESC)
SELECT DENSE_RANK() OVER (ORDER BY TOTAL_EARN DESC) AS TOTAL_EARN_RANK,
	COUNT_ORDER_RANK,
	CONCAT(COMPANY_NAME,'-&- ',CONTACT_NAME) AS COMPANY_CUSTOMER,
	COUNT_ORDERS,
	TOTAL_EARN
FROM CUST2

--C2)ARE THERE ANY CUSTOMERS WHO HAVE NEVER PLACED AN ORDER? IF YES, WHO ARE THEY?

SELECT COMPANY_NAME
FROM CUSTOMERS
WHERE CUSTOMER_ID NOT IN
		(SELECT CUSTOMER_ID
			FROM ORDERS)


--C3)RFM ANALYSIS AND CUSTOMER SEGMENTATION:

WITH RC AS
	(SELECT O.CUSTOMER_ID,C.COMPANY_NAME,MIN('1998.05.06' - O.ORDER_DATE::date)AS RECENCY_VALUE
		FROM ORDERS O
		INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
		GROUP BY 1,2
		ORDER BY 2),
	FR AS
	(SELECT O.CUSTOMER_ID,COUNT(ORDER_ID)AS FREQUENCY_VALUE
		FROM ORDERS O
		INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
		GROUP BY 1
		ORDER BY 2),
	MON AS
	(SELECT O.CUSTOMER_ID,ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY)::NUMERIC,0) AS MONETARY_VALUE
		FROM ORDERS O
		INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
		INNER JOIN ORDER_DETAILS OD ON OD.ORDER_ID = O.ORDER_ID
		GROUP BY 1
		ORDER BY 2),
RFM AS(
SELECT RC.CUSTOMER_ID,RC.COMPANY_NAME,
	RC.RECENCY_VALUE,
	FR.FREQUENCY_VALUE,
	MON.MONETARY_VALUE,
	NTILE(5) OVER(ORDER BY RECENCY_VALUE DESC) AS RECENCY_SCORE,
	NTILE(5) OVER(ORDER BY FREQUENCY_VALUE) AS FREQUENCY_SCORE,
	NTILE(5) OVER(ORDER BY MONETARY_VALUE) AS MONETARY_SCORE
FROM RC
INNER JOIN FR ON RC.CUSTOMER_ID = FR.CUSTOMER_ID
INNER JOIN MON ON RC.CUSTOMER_ID = MON.CUSTOMER_ID
ORDER BY 1
	)

SELECT CUSTOMER_ID,COMPANY_NAME,
	RECENCY_SCORE || '--' || FREQUENCY_SCORE || '--' || MONETARY_SCORE AS CUSTOMER_RFM_SCORE,
	CASE
					WHEN RECENCY_SCORE = 5 AND FREQUENCY_SCORE IN (4,5) THEN 'Champions'
					WHEN RECENCY_SCORE IN (3,4) AND FREQUENCY_SCORE IN (4,5) THEN 'Loyal Customers'
					WHEN RECENCY_SCORE IN (1,2) AND FREQUENCY_SCORE = 5 THEN 'Cant Lose Them'
					WHEN RECENCY_SCORE IN (1,2)AND FREQUENCY_SCORE IN(3,4) THEN 'At Risk'
					WHEN RECENCY_SCORE IN (4,5)AND FREQUENCY_SCORE IN (2,3) THEN 'Potential Loyalist'
					WHEN RECENCY_SCORE = 3 AND FREQUENCY_SCORE = 3 THEN 'Need Attention'
					WHEN RECENCY_SCORE = 3 AND FREQUENCY_SCORE IN (1,2) THEN 'About to Sleep'
					WHEN RECENCY_SCORE IN (1,2) AND FREQUENCY_SCORE IN (1,2) THEN 'Hibernating'
					WHEN RECENCY_SCORE = 4 AND FREQUENCY_SCORE = 1 THEN 'Promising'
					WHEN RECENCY_SCORE = 5	AND FREQUENCY_SCORE = 1 THEN 'New Costumer'
	END AS CUSTOMER_SEGMENT
FROM RFM
ORDER BY 2 DESC


--C4))RFM ANALYSIS AND CUSTOMER SEGMENTATION&PERCENTAGE RATINGS

WITH SEGMENT_PERCENT_SP AS(
WITH RC AS
	(SELECT O.CUSTOMER_ID,MIN('1998.05.06' - O.ORDER_DATE::date)AS RECENCY_VALUE
		FROM ORDERS O
		INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
		GROUP BY 1
		ORDER BY 2),
	FR AS
	(SELECT O.CUSTOMER_ID,COUNT(ORDER_ID)AS FREQUENCY_VALUE
		FROM ORDERS O
		INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
		GROUP BY 1
		ORDER BY 2),
	MON AS
	(SELECT O.CUSTOMER_ID,ROUND(SUM(OD.UNIT_PRICE * OD.QUANTITY)::NUMERIC,0) AS MONETARY_VALUE
		FROM ORDERS O
		INNER JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
		INNER JOIN ORDER_DETAILS OD ON OD.ORDER_ID = O.ORDER_ID
		GROUP BY 1
		ORDER BY 2),
RFM AS(
SELECT RC.CUSTOMER_ID,
	RC.RECENCY_VALUE,
	FR.FREQUENCY_VALUE,
	MON.MONETARY_VALUE,
	NTILE(5) OVER(ORDER BY RECENCY_VALUE DESC) AS RECENCY_SCORE,
	NTILE(5) OVER(ORDER BY FREQUENCY_VALUE) AS FREQUENCY_SCORE,
	NTILE(5) OVER(ORDER BY MONETARY_VALUE) AS MONETARY_SCORE
FROM RC
INNER JOIN FR ON RC.CUSTOMER_ID = FR.CUSTOMER_ID
INNER JOIN MON ON RC.CUSTOMER_ID = MON.CUSTOMER_ID
ORDER BY 1,2)

SELECT CUSTOMER_ID,
	RECENCY_SCORE || '--' || FREQUENCY_SCORE || '--' || MONETARY_SCORE as CUSTOMER_RFM_SCORE,
CASE
					WHEN RECENCY_SCORE = 5 AND FREQUENCY_SCORE IN (4,5) THEN 'Champions'
					WHEN RECENCY_SCORE IN (3,4) AND FREQUENCY_SCORE IN (4,5) THEN 'Loyal Customers'
					WHEN RECENCY_SCORE IN (1,2) AND FREQUENCY_SCORE = 5 THEN 'Cant Lose Them'
					WHEN RECENCY_SCORE IN (1,2)AND FREQUENCY_SCORE IN(3,4) THEN 'At Risk'
					WHEN RECENCY_SCORE IN (4,5)AND FREQUENCY_SCORE IN (2,3) THEN 'Potential Loyalist'
					WHEN RECENCY_SCORE = 3 AND FREQUENCY_SCORE = 3 THEN 'Need Attention'
					WHEN RECENCY_SCORE = 3 AND FREQUENCY_SCORE IN (1,2) THEN 'About to Sleep'
					WHEN RECENCY_SCORE IN (1,2) AND FREQUENCY_SCORE IN (1,2) THEN 'Hibernating'
					WHEN RECENCY_SCORE = 4 AND FREQUENCY_SCORE = 1 THEN 'Promising'
					WHEN RECENCY_SCORE = 5	AND FREQUENCY_SCORE = 1 THEN 'New Costumer'
		
END AS CUSTOMER_SEGMENT
FROM RFM
ORDER BY 2 DESC)

SELECT CUSTOMER_SEGMENT,
	COUNT(CUSTOMER_RFM_SCORE),
	'%' || (COUNT(CUSTOMER_RFM_SCORE) * 100 / 89)AS SEGMENT_PERCENT
FROM SEGMENT_PERCENT_SP
GROUP BY 1
ORDER BY 2 DESC



--EMPLOYEE ANALYSIS:


--E1) WHAT IS THE TOTAL NUMBER OF ORDERS AND THE AMOUNT EACH EMPLOYEE BRINGS TO THE COMPANY?

SELECT E.FIRST_NAME || ' ' || E.LAST_NAME AS EMPLOYEE_NAMES,
	E.TITLE AS EMPLOYEE_TITLE,
	COUNT(DISTINCT OD.ORDER_ID) AS TOTAL_NUMBER_ORDERS,
	COUNT(OD.*) AS TOTAL_NUMBER_ENTRIES,
	ROUND(SUM(OD.UNIT_PRICE * QUANTITY)::NUMERIC,0) AS EARN
FROM ORDERS AS O
INNER JOIN EMPLOYEES AS E ON O.EMPLOYEE_ID = E.EMPLOYEE_ID
INNER JOIN ORDER_DETAILS AS OD ON OD.ORDER_ID = O.ORDER_ID
INNER JOIN PRODUCTS AS P ON OD.PRODUCT_ID = P.PRODUCT_ID
GROUP BY EMPLOYEE_NAMES,
	EMPLOYEE_TITLE
ORDER BY EARN DESC

 --E2)HOW MUCH OF WHICH PRODUCT DID EACH EMPLOYEE SELL, HOW MANY ORDERS DID THEY TAKE AND HOW MUCH DID THEY EARN FOR THE COMPANY FROM THE PRODUCTS THEY SOLD?

WITH TOP AS(
WITH EMP AS
	(SELECT DISTINCT E.FIRST_NAME || ' ' || E.LAST_NAME AS EMPLOYEE_NAMES,
			E.TITLE AS EMPLOYEE_TITLE,
			CATEGORY_NAME,
			COUNT(DISTINCT OD.ORDER_ID) AS TOTAL_NUMBER_ORDERS,
			SUM(QUANTITY) AS TOTAL_QUANTITY,
			ROUND(SUM(OD.UNIT_PRICE * QUANTITY)::NUMERIC,0) AS EARN
		FROM ORDERS AS O
		INNER JOIN EMPLOYEES AS E ON O.EMPLOYEE_ID = E.EMPLOYEE_ID
		INNER JOIN ORDER_DETAILS AS OD ON OD.ORDER_ID = O.ORDER_ID
		INNER JOIN PRODUCTS AS P ON OD.PRODUCT_ID = P.PRODUCT_ID
		INNER JOIN CATEGORIES AS C ON C.CATEGORY_ID = P.CATEGORY_ID
		GROUP BY 1,2,3
		ORDER BY 1)
SELECT EMPLOYEE_NAMES,
	CATEGORY_NAME,
	TOTAL_NUMBER_ORDERS,
	EARN,
	TOTAL_QUANTITY,
	DENSE_RANK() OVER (PARTITION BY CATEGORY_NAME ORDER BY TOTAL_QUANTITY DESC )AS TOP_EMPLOYEE
FROM EMP
ORDER BY 4 DESC)
SELECT EMPLOYEE_NAMES,
	CATEGORY_NAME,
	TOTAL_NUMBER_ORDERS,
	EARN,
	TOTAL_QUANTITY,TOP_EMPLOYEE FROM TOP
WHERE TOP_EMPLOYEE IN (1,9)
ORDER BY 5 DESC
